{# src/Arii/StatBundle/Resources/views/Default/index.html.twig #}
{% extends "AriiJIDBundle::layout.html.twig" %}
{% block body %}
<script type="text/javascript">
dhtmlxEvent(window, "load", function(){
  var layout          = new dhtmlXLayoutObject(document.body, "3L");
  var layout1         = layout.cells("a").attachLayout("2E");
  var menu            = layout.attachMenu();
  var toolbar         = layout.attachToolbar();
  var jobGrid         = layout1.cells("b").attachGrid();
  var tabbar          = layout.cells("b").attachTabbar();
  var dataFrameGrid   = layout.cells("c").attachGrid();


  layout1.cells("a").setText("Menu");
  layout1.cells("a").setHeight(220);

  globalMenu = layout1.cells("a").attachMenu();
  globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
  globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");


  myTabs = layout1.cells("a").attachTabbar();
  myTabs.addTab("a1","{{ "Welcome" | trans }}","100px", null, true);
  myTabs.addTab("a2","{{ "Advanced" | trans }}","100px", null, true);

  myRibbon = myTabs.cells("a1").attachRibbon();
  myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
  myRibbon.loadStruct("{{ url('json_JID_ribbon') }}");
  myRibbon.attachEvent("onStateChange", StateRibbon );
  myRibbon.attachEvent("onClick", ClickRibbon );
  myTabs.cells("a1").setActive();
  myFormDate = myTabs.cells("a2").attachForm();
  myFormDate.loadStruct("{{url('xml_JID_job_date_form')}}");





  layout1.cells("b").setText("Jobs");
  //  layout1.cells("b").hideHeader();
  layout.cells("b").setText("Charts");
  layout.cells("a").setWidth(450);
  layout.cells("c").setText("Historique du job");

  tabbar.addTab("a1", "Table"    , "100px", null, true);
  tabbar.addTab("a2", "boxplot"  , "100px");
  tabbar.addTab("a3", "chartplot", "100px");
  tabbar.addTab("a4", "piePlot"  , "100px");

  tabbar.cells('a4').attachURL("{{url('pie_chart')}}");
  tabbar.cells('a3').attachURL("{{url('line_chart')}}");
  tabbar.cells('a2').attachURL("{{url('box_chart')}}");
  //var statGrid = tabbar.cells('a1').attachGrid();
  //statGrid.load("{{url('dataframe_xml')}}");


  //contactForm.loadStruct("data/form.xml");
  //contactForm.bind(jobGrid);

  //grid jobs
  jobGrid.setImagePath("codebase/imgs/");
  jobGrid.setIconsPath("icons/");
  jobGrid.setHeader("Spooler,Job_Name,Start_Time");
  jobGrid.attachHeader("#select_filter,#text_filter,#text_filter");
  jobGrid.setColTypes("ro,ro,ro");
  jobGrid.setInitWidths("100,165,*");
  jobGrid.setColAlign("left,left,left");
  jobGrid.enableSmartRendering(true, 15);
  jobGrid.init();
  jobGrid.load("{{ url('Stat_jobs_xml')}}");
  jobGrid.attachEvent("onRowDblClicked", function JobDetail(rId, cInd){
    layout.cells("c").progressOn();

    //myForm.load("{{ url('Stat_job_history_xml') }}?id="+id);
    // mise a jour de la toolbar
    //var status = jobGrid.cells(id, 3 ).getValue();
    //myDetailToolbar.showItem('unstop_job');
    //myDetailToolbar.showItem('stop_job');
    //myDetailToolbar.showItem('kill_task');
    /*if (status== 'STOPPED') {
        myDetailToolbar.hideItem('stop_job');
    }
    else {
        myDetailToolbar.hideItem('unstop_job');
    }
    if (status!= 'RUNNING') {
        myDetailToolbar.hideItem('kill_task');
    }*/
    //myParameters.load("{{ url('xml_JID_job_params') }}?id="+id );
    //myHistory.clearAll();
    //myHistory.load("{{ url('xml_JID_job_history') }}?id="+id );
    dataFrameGrid.clearAll();
    dataFrameGrid.load("{{ url('Stat_job_history_xml') }}?id="+rId, function (rId) {
      layout.cells("c").progressOff();
  });
});



  //grid dataframe
  dataFrameGrid.setImagePath("codebase/imgs/");
  dataFrameGrid.setIconsPath("icons/");
  dataFrameGrid.setHeader("ID, Spooler, Job_Name, Start_date, Duration, STEPS, PARAMETERS");
  dataFrameGrid.setColSorting("str,str,str,str,int,str,str");
  //dataFrameGrid.setColTypes("ro, ro, ro, ro, ro, ro, ro");
  dataFrameGrid.setInitWidths("100,150,250,250,250,250,250");
  dataFrameGrid.setColAlign("left, left, left, left, left, left,left");
  dataFrameGrid.init();
  dataFrameGrid.load("{{url('dataframe_xml')}}");



  //table of stat
  statGrid = tabbar.cells("a1").attachGrid();
  statGrid.setImagePath("codebase/imgs/");
  statGrid.setIconsPath("icons/");
  statGrid.setHeader("variable, count, mean, std, min, 25%, 50%,75%,max");
  statGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro");
  statGrid.setInitWidths("200,100,100,100,100,100,100,100,100");
  statGrid.setColAlign("left,center,left,center,center,center,center,center,center");
  statGrid.init();
  //statGrid.load("./tempChart/gridStat.xml");
  statGrid.load("{{url('describe_xml')}}");


  //toolbar.setIconsPath("icons/");
  //toolbar.loadStruct("data/toolbar.xml");

  //menu.setIconsPath("icons/");
  //menu.loadStruct("data/menu.xml");



  myFormDate.attachEvent("onXLE", function (name, value){
    calFrom = myFormDate.getCalendar("start_date");
    calTo = myFormDate.getCalendar("end_date");
    var date2 = calTo.getFormatedDate();
    var date1 = calFrom.getFormatedDate();
    calTo.setSensitiveRange(date1, null);
    calFrom.setSensitiveRange(null, date2);
  });


    myFormDate.attachEvent("onChange", function (name, value){
      calFrom = myFormDate.getCalendar("start_date");
      calTo = myFormDate.getCalendar("end_date");
      var date2 = calTo.getFormatedDate();
      var date1 = calFrom.getFormatedDate();
      calTo.setSensitiveRange(date1, null);
      calFrom.setSensitiveRange(null, date2);
    });


    myFormDate.attachEvent("onButtonClick",function(id){
      switch (id) {
        case 'proceed':
           layout1.cells("b").progressOn();
           calFrom = myFormDate.getCalendar("start_date");
           calTo = myFormDate.getCalendar("end_date");
           var date2 = calTo.getFormatedDate();
           var date1 = calFrom.getFormatedDate();
           DateRefresh(date1, date2);
           break;
        default:
           alert(id);
           break;
      }
    });


    function DateRefresh(date1, date2){
      //alert("from "+date1+" to "+date2);
      var tmp = "true"
      var route = "{{ url('Stat_jobs_date_xml', {'date1' : 'date1', 'date2':'date2'}) }}";
      route = route.replace("date1", date1);
      route = route.replace("date2", date2);

      //a changer car duplication de code de refresh
      var route2 = "{{ url('Stat_jobs_xml') }}";
      route2 = route.replace("var", false);

      layout1.cells("b").progressOn();
      jobGrid.load(route);

      jobGrid.load(route2,function(){
        layout1.cells("b").progressOff();
        jobGrid.refreshFilters();
        jobGrid.filterByAll();
        jobGrid.filterBy(4, status);
        layout1.progressOff();
      });
    }

//End
});

</script>
 </html>
{% endblock %}
